local function fixed_projection(near, far, zoom)
    local projected_width = render.get_window_width() / (zoom or 1)
    local projected_height = render.get_window_height() / (zoom or 1)
    local xoffset = -(projected_width - render.get_width()) / 2
    local yoffset = -(projected_height - render.get_height()) / 2
    return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near, far)
end
local function fixed_fit_projection(near, far)
    local width = render.get_width()
    local height = render.get_height()
    local window_width = render.get_window_width()
    local window_height = render.get_window_height()
    local zoom = math.min(window_width / width, window_height / height)
    return fixed_projection(near, far, zoom)
end
local function stretch_projection(near, far)
    return vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), near, far)
end
local function get_projection(self)
    return self.projection_fn(self.near, self.far, self.zoom)
end

-- Create/Refresh render target buffer - depth for 3d
local function post_builder(self,refresh)
    if refresh then
        render.delete_render_target(self.postprocess)
    end
    local rgba_params = {format = render.FORMAT_RGBA,width = render.get_window_width(),height = render.get_window_height(),u_wrap = render.WRAP_CLAMP_TO_EDGE,v_wrap = render.WRAP_CLAMP_TO_EDGE}
    local depth_params = { format = render.FORMAT_DEPTH,width = render.get_window_width(),height = render.get_window_height(),u_wrap = render.WRAP_CLAMP_TO_EDGE,v_wrap = render.WRAP_CLAMP_TO_EDGE }
    local target_params = {[render.BUFFER_COLOR_BIT] = rgba_params , [render.BUFFER_DEPTH_BIT] = depth_params}
    return render.render_target("pp_screen",target_params)
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.model_pred = render.predicate({"model"})
    self.postprocess_pred = render.predicate({"postprocess"})
    
    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()
    self.near = -1
    self.far = 1
    self.projection_fn = stretch_projection

    --post process initialize
    self.pp_On = false
    self.postprocess = post_builder(self,false)
end
local function render_pp(self) -- Render post process effect with ortho
    render.enable_texture(0, self.postprocess, render.BUFFER_COLOR_BIT)
    render.set_projection(vmath.matrix4_orthographic(-1, 1, -1, 1, -1, 1))
    render.draw(self.postprocess_pred)
    render.disable_texture(0, self.postprocess)
end
function update(self)
    if self.pp_On then
        render.enable_render_target(self.postprocess)
    end
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.set_view(self.view)
    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())

    -- render models
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)
    render.draw(self.model_pred, {constants = constants})
    -- debug rendering models
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_CULL_FACE)    
    render.draw_debug3d()
    if self.pp_On then
        render.disable_render_target(self.postprocess)
        render_pp(self)
    end
    -- sprites etc
    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)
    render.set_projection(get_projection(self))
    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.draw_debug3d()

    -- render GUI
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))
    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
        self.projection = message.projection
    elseif message_id == hash("window_resized") then
        if self.pp_On then
            self.postprocess = post_builder(self,true)
        end
    elseif message_id == hash("posteffect") then
        if self.pp_On ~= nil then
            self.pp_On = not self.pp_On
        end
    elseif message_id == hash("use_camera_projection") then
        self.projection_fn = function() return self.projection or vmath.matrix4() end
    elseif message_id == hash("use_stretch_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = stretch_projection
    elseif message_id == hash("use_fixed_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.zoom = message.zoom or 1
        self.projection_fn = fixed_projection
    elseif message_id == hash("use_fixed_fit_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = fixed_fit_projection
    end
end
